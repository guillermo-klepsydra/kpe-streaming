name: Check build

on:
  push:
  workflow_dispatch:

defaults:
  run:
    shell: bash

jobs:
  builddebug:
    name: Vanilla Debug
    runs-on: [self-hosted, aws, general, X64]
    container:
      image: 337955887028.dkr.ecr.eu-central-1.amazonaws.com/general:kpe-build-1.0.0
      options: --user kpsruser
      credentials:
        username: AWS
        password: ${{ secrets.ECR_PASSWORD }}
    steps:
      - name: Clone kpe-core
        uses: actions/checkout@v2
        with:
          repository: klepsydra-technologies/kpe-core
          submodules: recursive
          ref: main
          path: kpe-core
          token: ${{ secrets.GH_TOKEN }}

      - name: Install kpe-core
        run: |
          mkdir build && cd build 
          cmake -DKPSR_WITH_DOXYGEN=true -DKPSR_WITH_DDS=false -DKPSR_WITH_ZMQ=false -DKPSR_TEST_PERFORMANCE=false -DKPSR_WITH_SOCKET=true -DKPSR_WITH_YAML=false -DKPSR_WITH_CODE_METRICS=true -DCMAKE_BUILD_TYPE=Debug -DKPSR_ENABLE_TESTS=false -DKPSR_ENABLE_EXAMPLES=false ../
          make -j$(nproc)
          sudo make -j$(nproc) install
        working-directory: kpe-core

      - name: Upload kpsr_codegen
        uses: actions/upload-artifact@v2
        with:
          name: kpsr_codegen
          path: |
            kpe-core/build/kpsr_codegen-1.0-py3-none-any.whl

      - name: Remove kpe-core sources
        run: |
          sudo rm -rf ${GITHUB_WORKSPACE}/kpe-core

      - name: Clone kpe-admin
        uses: actions/checkout@v2
        with:
          repository: klepsydra-technologies/kpe-admin
          submodules: recursive
          ref: main
          path: kpe-admin
          token: ${{ secrets.GH_TOKEN }}

      - name: Install kpe-admin
        run: |
          mkdir build && cd build 
          cmake -DKPSR_WITH_DOXYGEN=true -DKPSR_WITH_SOCKET=true -DCMAKE_BUILD_TYPE=Debug  -DKPSR_NO_LICENSE=true -DKPSR_ENABLE_TESTS=false -DKPSR_ENABLE_EXAMPLES=false ../
          make -j$(nproc)
          sudo make -j$(nproc) install
        working-directory: kpe-admin

      - name: Remove kpe-admin sources
        run: |
          sudo rm -rf ${GITHUB_WORKSPACE}/kpe-admin

      - name: Clone kpe-streaming
        uses: actions/checkout@v2
        with:
          submodules: recursive
          token: ${{ secrets.GH_TOKEN }}

      - name: Build kpe-streaming
        run: |
          mkdir build && cd build
          cmake -DKPSR_WITH_DOXYGEN=true -DCMAKE_BUILD_TYPE=Debug  -DKPSR_ENABLE_TESTS=true -DKPSR_ENABLE_EXAMPLES=false ../
          make -j$(nproc)

      - name: Unit tests
        run: |
          cd build
          make test

      - name: Upload logs on failure
        if: failure()
        uses: actions/upload-artifact@v2
        with:
          name: builddebug-logs
          path: |
            build/CMakeFiles/CMakeOutput.log
            build/CMakeFiles/CMakeError.log
            build/Testing/Temporary
            build/code_generator/kpsr_codegen/build_cpptesting/Testing/Temporary

      - name: Workspace cleanup
        if: always()
        run: |
          sudo rm -rf ${GITHUB_WORKSPACE}/build

  buildrelease:
    needs: builddebug
    strategy:
      matrix:
        include:
          - name: Vanilla
            zmq: "false"
            dds: "false"

          - name: ZMQ
            zmq: "true"
            dds: "false"

    name: ${{ matrix.name }} Release
    runs-on: [self-hosted, aws, general, X64]
    container:
      image: 337955887028.dkr.ecr.eu-central-1.amazonaws.com/general:kpe-build-1.0.0
      options: --user kpsruser
      credentials:
        username: AWS
        password: ${{ secrets.ECR_PASSWORD }}
    steps:
      - name: Clone kpe-core
        uses: actions/checkout@v2
        with:
          repository: klepsydra-technologies/kpe-core
          submodules: recursive
          ref: main
          path: kpe-core
          token: ${{ secrets.GH_TOKEN }}

      - name: Install kpe-core
        run: |
          mkdir build && cd build 
          cmake -DKPSR_WITH_DOXYGEN=false -DKPSR_WITH_DDS=${{ matrix.dds }} -DKPSR_WITH_ZMQ=${{ matrix.zmq }} -DKPSR_TEST_PERFORMANCE=false -DKPSR_WITH_SOCKET=true -DKPSR_WITH_YAML=false -DKPSR_WITH_CODE_METRICS=true -DCMAKE_BUILD_TYPE=Release -DKPSR_ENABLE_TESTS=false -DKPSR_ENABLE_EXAMPLES=false ../
          make -j$(nproc)
          sudo make -j$(nproc) install
        working-directory: kpe-core

      - name: Remove kpe-core sources
        run: |
          sudo rm -rf ${GITHUB_WORKSPACE}/kpe-core

      - name: Clone kpe-admin
        uses: actions/checkout@v2
        with:
          repository: klepsydra-technologies/kpe-admin
          submodules: recursive
          ref: main
          path: kpe-admin
          token: ${{ secrets.GH_TOKEN }}

      - name: Install kpe-admin
        run: |
          mkdir build && cd build 
          cmake -DKPSR_WITH_DOXYGEN=true -DKPSR_WITH_SOCKET=true -DCMAKE_BUILD_TYPE=Debug  -DKPSR_NO_LICENSE=true -DKPSR_ENABLE_TESTS=false -DKPSR_ENABLE_EXAMPLES=false ../
          make -j$(nproc)
          sudo make -j$(nproc) install
        working-directory: kpe-admin

      - name: Remove kpe-admin sources
        run: |
          sudo rm -rf ${GITHUB_WORKSPACE}/kpe-admin

      - name: Clone kpe-streaming
        uses: actions/checkout@v2
        with:
          submodules: recursive
          token: ${{ secrets.GH_TOKEN }}

      - name: Build kpe-streming
        run: |
          mkdir build && cd build
          cmake -DKPSR_WITH_DOXYGEN=true -DCMAKE_BUILD_TYPE=Debug -DKPSR_ENABLE_TESTS=true -DKPSR_ENABLE_EXAMPLES=false ../
          make -j$(nproc)

      - name: Unit tests
        run: |
          cd build
          make test

      - name: Upload logs on failure
        if: failure()
        uses: actions/upload-artifact@v2
        with:
          name: builddebug-logs
          path: |
            build/CMakeFiles/CMakeOutput.log
            build/CMakeFiles/CMakeError.log
            build/Testing/Temporary
            build/code_generator/kpsr_codegen/build_cpptesting/Testing/Temporary

      - name: Workspace cleanup
        if: always()
        run: |
          sudo rm -rf ${GITHUB_WORKSPACE}/build

  rtems5:
    needs: builddebug
    runs-on: [self-hosted, aws, general, X64]
    strategy:
      matrix:
        rtemstarget: ["zedboard", "zynqa9qemu"]
    name: RTEMS5 ${{ matrix.rtemstarget }}
    container:
      image: "337955887028.dkr.ecr.eu-central-1.amazonaws.com/rtems5:${{ matrix.rtemstarget }}-1.0.0"
      options: --user kpsruser
      credentials:
        username: AWS
        password: ${{ secrets.ECR_PASSWORD }}
    steps:
      - name: Clone kpe-core
        uses: actions/checkout@v2
        with:
          repository: klepsydra-technologies/kpe-core
          submodules: recursive
          ref: main
          path: kpe-core
          token: ${{ secrets.GH_TOKEN }}

      - name: Install kpe-core
        run: |
          mkdir build && cd build 
          cmake -DCMAKE_BUILD_TYPE=Release -DKPSR_RTEMS5_ZYNQ_ZC706=On ../
          make -j$(nproc)
          sudo make -j$(nproc) install
        working-directory: kpe-core

      - name: Remove kpe-core sources
        run: |
          sudo rm -rf ${GITHUB_WORKSPACE}/kpe-core

      - name: Clone kpe-admin
        uses: actions/checkout@v2
        with:
          repository: klepsydra-technologies/kpe-admin
          submodules: recursive
          ref: main
          path: kpe-admin
          token: ${{ secrets.GH_TOKEN }}

      - name: Download kpsr_codegen
        uses: actions/download-artifact@v2
        with:
          name: kpsr_codegen

      - name: Install codegen
        run: |
          pip3 install $(find -name "kpsr_codegen*.whl")

      - name: Run admin codegen
        run: |
          python3 -m kpsr_codegen -i ${GITHUB_WORKSPACE}/kpe-admin/kidl -o ${GITHUB_WORKSPACE}/kpe-admin/gen -p klepsydra/admin -r True -z False -d True

      - name: Install kpe-admin
        run: |
          mkdir build && cd build
          cmake -DCMAKE_BUILD_TYPE=Release -DKPSR_RTEMS5_ZYNQ_ZC706=On -DKPSR_NO_LICENSE=true ../
          make -j$(nproc)
          sudo make -j$(nproc) install
        working-directory: kpe-admin

      - name: Remove kpe-admin sources
        run: |
          sudo rm -rf ${GITHUB_WORKSPACE}/kpe-admin

      - name: Build kpe-streaming
        run: |
          mkdir build && cd build
          cmake -DCMAKE_BUILD_TYPE=Release -DKPSR_RTEMS5_ZYNQ_ZC706=On -DKPSR_NO_LICENSE=true ../
          make -j$(nproc)
          sudo make -j$(nproc) install

      - name: Upload logs on failure
        if: failure()
        uses: actions/upload-artifact@v2
        with:
          name: rtems5-{{ matrix.rtemstarget }}
          path: |
            build/Testing/Temporary
            build/code_generator/kpsr_codegen/build_cpptesting/Testing/Temporary

      - name: Workspace cleanup
        if: always()
        run: |
          sudo rm -rf ${GITHUB_WORKSPACE}/build
